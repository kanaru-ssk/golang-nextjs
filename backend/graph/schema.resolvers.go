package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"backend/graph/model"
	"context"
	"fmt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.UserInput) (*model.User, error) {
	var user model.User
	err := r.DB.
		QueryRow("INSERT INTO users (name) VALUES ($1) RETURNING id,name;", input.Name).
		Scan(&user.ID, &user.Name)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input model.UserInput) (*model.User, error) {
	var user model.User
	err := r.DB.
		QueryRow("UPDATE users SET name=$1 WHERE id=$2 RETURNING id,name;", input.Name, id).
		Scan(&user.ID, &user.Name)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (int, error) {
	_, err := r.DB.Exec("DELETE FROM users WHERE id=$1;", id)
	if err != nil {
		return 0, err
	}
	return id, nil
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodoInput) (*model.Todo, error) {
	var todo model.Todo
	err := r.DB.
		QueryRow("INSERT INTO todos (text,user_id) VALUES ($1,$2) RETURNING id,text,done,user_id;", input.Text, input.UserID).
		Scan(&todo.ID, &todo.Text, &todo.Done, &todo.UserID)
	if err != nil {
		return nil, err
	}
	return &todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id int, input model.UpdateTodoInput) (*model.Todo, error) {
	query := ""
	if input.Text != nil {
		query += fmt.Sprintf("text='%s'", *input.Text)
	}
	if input.Done != nil {
		query += fmt.Sprintf(",done='%t'", *input.Done)
	}
	fmt.Println(query)
	if query == "" {
		return nil, fmt.Errorf("no field to update")
	}
	query = fmt.Sprintf("UPDATE todos SET %s WHERE id=$1 RETURNING id,text,done,user_id;", query)
	var todo model.Todo
	err := r.DB.
		QueryRow(query, id).
		Scan(&todo.ID, &todo.Text, &todo.Done, &todo.UserID)
	if err != nil {
		return nil, err
	}
	return &todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id int) (int, error) {
	_, err := r.DB.Exec("DELETE FROM todos WHERE id=$1;", id)
	if err != nil {
		return 0, err
	}
	return id, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input int) (*model.User, error) {
	var user model.User
	err := r.DB.
		QueryRow("SELECT id,name FROM users WHERE id = $1 LIMIT 1;", input).
		Scan(&user.ID, &user.Name)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	rows, err := r.DB.Query("SELECT id,name FROM users;")
	if err != nil {
		return nil, err
	}
	var users []*model.User
	for rows.Next() {
		var user model.User
		err := rows.Scan(&user.ID, &user.Name)
		if err != nil {
			return users, err
		}
		users = append(users, &user)
	}
	return users, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, input int) ([]*model.Todo, error) {
	rows, err := r.DB.Query("SELECT id,text,done,user_id FROM todos WHERE user_id = $1;", input)
	if err != nil {
		return nil, err
	}
	var todos []*model.Todo
	for rows.Next() {
		var todo model.Todo
		err := rows.Scan(&todo.ID, &todo.Text, &todo.Done, &todo.UserID)
		if err != nil {
			return todos, err
		}
		todos = append(todos, &todo)
	}
	return todos, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	var user model.User
	err := r.DB.
		QueryRow("SELECT id,name FROM users WHERE id = $1 LIMIT 1;", obj.UserID).
		Scan(&user.ID, &user.Name)
	if err != nil {
		return nil, err
	}
	return &user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
