package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"backend/graph/model"
	"context"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	var todo model.Todo
	err := r.DB.
		QueryRow("INSERT INTO todos (text,user_id) VALUES ($1,1) RETURNING id,text,done;", input.Text).
		Scan(&todo.ID, &todo.Text, &todo.Done)
	if err != nil {
		return nil, err
	}
	return &todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	rows, err := r.DB.Query("SELECT id,text,done FROM todos;")
	if err != nil {
		return nil, err
	}
	var todos []*model.Todo
	for rows.Next() {
		var todo model.Todo
		err := rows.Scan(&todo.ID, &todo.Text, &todo.Done)
		if err != nil {
			return todos, err
		}
		todos = append(todos, &todo)
	}
	return todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
